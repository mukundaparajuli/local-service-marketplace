// Improved Prisma schema with better structure, naming, and clarity

// Prisma Generator
generator client {
  provider = "prisma-client-js"
}

// Data Source
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum UserRole {
  CUSTOMER
  PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PricingType {
  FIXED
  HOURLY
  STARTING_AT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

enum ChatStatus {
  PENDING
  ENABLED
}

// USER MODELS
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  firstName    String?
  lastName     String?
  username     String   @unique
  phoneNumber  String?
  profileImage String?
  isActive     Boolean  @default(true)
  role         UserRole @default(CUSTOMER)
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile          ProviderProfile?
  bookings         Booking[]        @relation("ClientBookings")
  reviews          Review[]
  sentMessages     Message[]        @relation("SentMessages")
  receivedMessages Message[]        @relation("ReceivedMessages")
  payments         Payment[]
  conversations    Conversation[]
}

model ProviderProfile {
  id                Int      @id @default(autoincrement())
  businessName      String
  description       String   @db.Text
  address           String?
  city              String
  state             String
  zipCode           String?
  latitude          Float?
  longitude         Float?
  operatingHours    Json?
  serviceRadius     Int?
  acceptsHomeVisits Boolean  @default(false)
  hasPhysicalStore  Boolean  @default(false)
  isKYCVerified     Boolean  @default(false)
  isBlocked         Boolean  @default(false)
  averageRating     Float    @default(0)
  totalReviews      Int      @default(0)
  contactInfo       Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userId           Int                     @unique
  user             User                    @relation(fields: [userId], references: [id])
  serviceOfferings ServiceOffering[]
  serviceLocations ServiceLocation[]
  bookings         Booking[]               @relation("ProviderBookings")
  categories       CategoriesOnProviders[]
  payments         Payment[]
  reviews          Review[]
}

model ServiceOffering {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Decimal     @db.Decimal(10, 2)
  pricingType PricingType
  duration    Int?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  providerProfileId Int?
  providerProfile   ProviderProfile? @relation(fields: [providerProfileId], references: [id])

  serviceSubCategoryId String?
  serviceSubCategory   ServiceSubCategory? @relation(fields: [serviceSubCategoryId], references: [id])

  bookings Booking[]
}

model ServiceCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?  @db.Text
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  providers     CategoriesOnProviders[]
  subCategories ServiceSubCategory[]
}

model ServiceSubCategory {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId String
  category   ServiceCategory   @relation(fields: [categoryId], references: [id])
  services   ServiceOffering[]

  @@unique([name, categoryId])
}

model CategoriesOnProviders {
  providerId Int
  categoryId String
  assignedAt DateTime @default(now())

  provider ProviderProfile @relation(fields: [providerId], references: [id], onDelete: Cascade)
  category ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([providerId, categoryId])
}

model Booking {
  id               Int           @id @default(autoincrement())
  status           BookingStatus
  totalCost        Decimal       @db.Decimal(10, 2)
  scheduledDate    DateTime
  scheduledEndTime DateTime
  location         String?
  notes            String?       @db.Text
  chatStatus       ChatStatus    @default(PENDING)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  userId Int?
  client User? @relation("ClientBookings", fields: [userId], references: [id])

  providerProfileId Int?
  providerProfile   ProviderProfile? @relation("ProviderBookings", fields: [providerProfileId], references: [id])

  serviceId Int?
  service   ServiceOffering? @relation(fields: [serviceId], references: [id])

  payment       Payment?
  review        Review?
  messages      Message[]
  conversations Conversation[]
}

model Payment {
  id                 String          @id @default(uuid())
  amount             Decimal         @db.Decimal(10, 2)
  status             PaymentStatus   @default(PENDING)
  paymentMethod      String?
  transactionId      String
  transactionDetails Json?
  bookingId          Int             @unique
  booking            Booking         @relation(fields: [bookingId], references: [id])
  userId             Int
  paidBy             User            @relation(fields: [userId], references: [id])
  providerProfileId  Int
  paidTo             ProviderProfile @relation(fields: [providerProfileId], references: [id])
  createdAt          DateTime        @default(now())
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  userId Int
  User   User @relation(fields: [userId], references: [id])

  providerProfileId Int
  provider          ProviderProfile @relation(fields: [providerProfileId], references: [id])

  bookingId Int     @unique
  Booking   Booking @relation(fields: [bookingId], references: [id])
}

model ServiceLocation {
  id        Int     @id @default(autoincrement())
  address   String
  city      String
  state     String
  zipCode   String
  latitude  Float?
  longitude Float?
  isPrimary Boolean @default(false)

  providerProfileId Int?
  ProviderProfile   ProviderProfile? @relation(fields: [providerProfileId], references: [id])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  senderId       Int
  sender         User          @relation("SentMessages", fields: [senderId], references: [id])
  receiverId     Int
  receiver       User          @relation("ReceivedMessages", fields: [receiverId], references: [id])
  bookingId      Int
  booking        Booking       @relation(fields: [bookingId], references: [id])
  conversationId Int?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
}

model Conversation {
  id           Int       @id @default(autoincrement())
  participants User[]
  bookingId    Int       @unique
  booking      Booking   @relation(fields: [bookingId], references: [id])
  messages     Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
